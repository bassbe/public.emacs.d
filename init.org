* Intro
  Reminders for me:
  
  - Use "<el + TAB" to insert of emacs lisp with org babel.
    + this is called an 'org template'
  - Use "C-c '" to edit source code in the blocks

* Init
:PROPERTIES:
:header-args:emacs-lisp: :tangle ../.emacs
:END:

** Cask & Packages 						 :understand:


#+BEGIN_SRC emacs-lisp
  (require 'cask "/usr/local/Cellar/cask/0.8.1/cask.el")
  (cask-initialize)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  ;; packages
  (when (>= emacs-major-version 24)
    (require 'package)
    (package-initialize)
    (add-to-list 'package-archives '("melpa" . "http://melpa.milkbox.net/packages/") t))

  (require 'package)
  (add-to-list 'package-archives
               '("elpy" . "https://jorgenschaefer.github.io/packages/"))
#+END_SRC
** Startup							       :done:
  - [[http://freedom.ascii.uk/][Freedom]]
  - [[http://chris.com/ascii/index.php?art%3Dobjects/flags][Flag]]
  - [[https://stackoverflow.com/questions/36244529/emacs-how-to-load-file-content-in-scratch-screen#36272179][SO: Loading File Contenets into Scratch Buffer]]
#+BEGIN_SRC emacs-lisp
  ;; (desktop-save-mode 1)                   ; ?
  (setq inhibit-startup-message t)        ; no startup message
  ;; (setq initial-scratch-message "")       ; Scratch Message

    (when (get-buffer "*scratch*")
      (with-current-buffer "*scratch*"
        (insert-file-contents "~/.emacs.d/scratch-message.txt")))
#+END_SRC

** Appearance [User Interface]
*** Color Themes						 :understand:

  This is my directory where I store themes I find on the internet.
  Still not sure how comfortable I am executingother people's unchecked lisp code.

#+BEGIN_SRC emacs-lisp 
  (setq custom-theme-directory "~/.emacs.d/themes/")
#+END_SRC

  Notice the important difference between /color themes/ and /customize themes/.
  I'm using color themes here because they can be reversed easily.

  Here, I load the Calm Forest color theme after (?) color theme is somehow loaded.

#+BEGIN_SRC emacs-lisp 
  (add-to-list 'load-path "~/.emacs.d/themes/color-theme-6.6.0")
  (require 'color-theme)
  (eval-after-load "color-theme"
    '(progn
       (color-theme-initialize)

       ;; This is the current theme in emacs
       (color-theme-calm-forest)
       ))
#+END_SRC

#+BEGIN_SRC emacs-lisp 
  (require 'doom-themes)
  ;; (load-theme 'doom-one t)


   ;; doom-one: inspired by Atom's One Dark themes
   ;; doom-vibrant: a more vibrant version of doom-one
   ;; doom-molokai: based on Textmate's monokai
   ;; doom-nova: adapted from Nova (thanks to bigardone)
   ;; doom-one-light: light version of doom-one
   ;; doom-x: reads your colors from ~/.Xresources
   ;; doom-tomorrow-night / doom-tomorrow-day: by Chris Kempson
   ;; doom-spacegrey: I'm sure you've heard of it
   ;; doom-mono-dark / doom-mono-light: a minimalistic, monochromatic theme
   ;; doom-tron: based on Tron Legacy from daylerees' themes
   ;; doom-peacock: based on Peacock from daylerees' themes
#+END_SRC


*** Set Color Theme
  
  This is what I used to have. Not easily reversable. Would not recommend.

#+BEGIN_SRC emacs-lisp
  ;; (setq custom-enabled-themes 'wombat)
#+END_SRC

** General Default Modes & Preferences

#+BEGIN_SRC emacs-lisp 
  (scroll-bar-mode -1)                   ; delete scroll bar

  ;; Only hook linum mode to program modes
  ;; (global-linum-mode t)                  ; Always show line numbers
  (tool-bar-mode -1)                     ; Delete Toolbar
  (put 'narrow-to-page 'disabled nil)    ; enable narrowing page
  (put 'narrow-to-region 'disabled nil)  ; enable narrowing page
  (put 'upcase-region 'disabled nil)      ; enable 'upcase-region
  (fset 'yes-or-no-p 'y-or-n-p)           ; y-or-n instead of "yes/no" on prompts.

  (column-number-mode 1)                  ; Display column numbers
  (show-paren-mode t)                     ; Show matching parentheses
  (blink-cursor-mode t)                   ; Blink cursor (easier to find)
  (mouse-avoidance-mode 'banish)          ; Hide mouse once typing starts
  (electric-pair-mode t)                  ; Pair parens, quotes, brackes
  (global-visual-line-mode t)             ; wraps lines so they don't go off screen
  (transient-mark-mode 1)                 ; Highlight region
  (ido-mode 1)                            ; enable IDO mode
  (delete-selection-mode t)               ; Delete highlighted section if followed by typing

  (setq undo-limit 3600)                  ; increase number of undo enteries
  (setq ido-enable-flex-matching t)       ; ?
  (setq ido-everywhere t)                 ; ? (how is it different)
  (setq visible-bell t)                   ; ? (not working)

#+END_SRC

** Key Bindings
*** Window/Frame Navigation

  I can't remember where I've copied these bindings from, but they're easier than C-x number.

#+BEGIN_SRC emacs-lisp 
  ;; Window Management (should I include Ace-window)
  (global-set-key (kbd "M-2") ' delete-window)            ; close current pane
  (global-set-key (kbd "M-3") 'delete-other-windows)      ; delete all other panes
  (global-set-key (kbd "M-4") 'split-window-vertically)   ; split window top/bottom
  (global-set-key (kbd "M-5") 'split-window-horizontally) ; split window left/right

  (global-set-key (kbd "s-}") #'other-window)
  (global-set-key (kbd "s-{") #'previous-multiframe-window)
#+END_SRC

*** Navigating & Selecting Text
#+begin_src emacs-lisp :tangle yes
  ;; Movement/Highlighting
  ;; press ';' again to expand, '-' to subtract, 0 to return
  (global-set-key (kbd "C-;") 'er/expand-region)

  ;; Maybe not a good idea, but use browse-kill-ring, its useful
  ;; (global-set-key (kbd "C-y") 'browse-kill-ring)
#+end_src

*** Imenu
#+BEGIN_SRC emacs-lisp
  (autoload 'idomenu "idomenu" nil t)
  (global-set-key (kbd "M-i") 'ido-goto-symbol) 
#+END_SRC
** Customizations File

#+BEGIN_SRC emacs-lisp 
  (setq custom-file "~/.emacs.d/lisp/init-customizations.el")
#+END_SRC

** Not Sure If These Work
*** Delete By Moving to Trash					      :fixme:

  This deletes by moving to trash.
  I've had a lot of trouble getting this to work.

#+begin_src emacs-lisp
  ;; Not Working
  ;; (setq delete-by-moving-to-trash t)
#+end_src

** IRC
*** ERC								      :fixme:
#+BEGIN_SRC emacs-lisp 

  ;; ------------------------------------------------------------------------------
  ;; ERC Startup
  ;; ------------------------------------------------------------------------------


  (setq erc-autojoin-timing 'indent)

  (setq erc-hide-list
        '("JOIN" "KICK" "NICK" "PART" "QUIT" "MODE" "Users" "329" "353" "366" "MODE"))
  (setq erc-track-exclude-types
        '("JOIN" "KICK" "NICK" "PART" "QUIT" "MODE" "333" "353"))

  ;; -----------------------------------------------------------------------------
  ;; Logging
  ;; -----------------------------------------------------------------------------

  (setq erc-log-channels-directory "/Volumes/dotsecret/irc-logs")
  (erc-log-mode t)                     ; enable logging

  ;; -----------------------------------------------------------------------------
  ;; Modules (whatever they are)
  ;; -----------------------------------------------------------------------------
  (setq erc-modules
        '(autojoin
          button
          completion
          fill
          irccontrols
          list
          log
          match
          menu
          move-to-prompt
          netsplit
          networks
          noncommands
          readonly
          ring
          services
          stamp
          track))


  ;; (setq erc-track-minor-mode t)                ; ?
  ;; (setq erc-track-mode t)                      ; ?
  ;; (setq erc-track-switch-from-erc t)   ; ?
  ;; (setq erc-services-mode t)           ; ?
  ;; (setq erc-stamp-mode)                        ; ?
  ;; (setq erc-noncommands-mode t)                ; ?
  ;; (setq erc-pcomplete-mode t)          ; ?
  ;; (setq erc-prompt-for-password nil)   ; ?
  ;; (setq erc-readonly-mode t)              ; ?
  ;; (setq erc-ring-mode t)                  ; ?
  ;; (setq erc-move-to-prompt-mode t)        ; ?
  ;; (setq erc-netsplit-mode t)              ; ?
  ;; (setq erc-networks-mode t)              ; ?
  ;; (setq erc-match-mode t)                 ; ?
  ;; (setq erc-menu-mode t)                  ; ?
  ;; (setq erc-irccontrols-mode t)           ; ?
  ;; (setq erc-list-mode t)                  ; ?
  ;; (setq erc-fill-mode t)                  ; ?
  ;; (setq erc-autojoin-mode t)              ; ?
  ;; (setq erc-button-mode t)                ; ?
  ;; (setq erc-prompt-for-nickserv-password nil) ; ?




  ;; ------------------------------------------------------------------------------
  ;; ERC Colors
  ;; ------------------------------------------------------------------------------
  ;; (setq erc-input-face ((t (:foreground "alternateSelectedControlColor"))))
  ;; (setq erc-my-nick-face ((t (:foreground "Red" :weight bold))))
  ;; (setq erc-nick-default-face ((t (:weight bold))))


  ;; ------------------------------------------------------------------------------
  ;; ERC Functions
  ;; ------------------------------------------------------------------------------
  ;; ;; ERC Spook
  ;;  (defun erc-cmd-SPOOK ()
  ;;    (let* ((spook (with-temp-buffer (spook) (buffer-string)))
  ;;           (output (replace-regexp-in-string "\n" " " spook)))
  ;;      (erc-send-message output)))

  ;; ------------------------------------------------------------------------------
  ;; Bitlbee
  ;; ------------------------------------------------------------------------------
  ;; (add-hook 'erc-join-hook 'bitlbee-identify)
#+END_SRC
*** rcirc							      :fixme:
    ;lkj
#+BEGIN_SRC emacs-lisp
  (rcirc-track-minor-mode 1)           ; This is awesome
#+END_SRC
*** Circe							      :empty:
*** ZNC								      :empty:
** Shell
*** Iterm

#+BEGIN_SRC elisp
  (defun iterm-here ()
    (interactive)
    (dired-smart-shell-command "open -a iTerm $PWD" nil nil))

  (define-key global-map (kbd "C-c C-'") 'iterm-here)
#+END_SRC
** Email							      :empty:
*** Gnus
#+BEGIN_SRC emacs-lisp

  ;; Set location of gnus.el to dotsecret
  ;; https://lists.gnu.org/archive/html/info-gnus-english/2015-02/msg00018.html
  (setq gnus-init-file "/Volumes/dotsecret/.gnus.d/.gnus.el")
  (setq gnus-directory "/Volumes/dotsecret/.gnus.d/")
  (setq gnus-home-directory "/Volumes/dotsecret/.gnus.d/")
  (setq gnus-startup-file (concat gnus-home-directory ".newsrc")) 
#+END_SRC
** Easy PG
#+BEGIN_SRC emacs-lisp
  ;; https://www.emacswiki.org/emacs/EasyPG
  (epa-file-enable)
  (custom-set-variables '(epg-gpg-program "/usr/local/Cellar/gnupg/2.1.21/bin/gpg2"))
#+END_SRC
** Auto Complete
#+begin_src emacs-lisp
  (ac-config-default)
#+end_src

** Backup Files (~)						 :understand:

  - [[http://stackoverflow.com/questions/151945/how-do-i-control-how-emacs-makes-backup-files][SO: Control Backup Files]]

#+BEGIN_SRC emacs-lisp 

  (setq backup-directory-alist `(("." . "~/.emacs.d/machine-specific/backup-files/")))
  (setq backup-by-copying t)

  ;; =============================================================================
  ;; Undecided & Unused
  ;; =============================================================================

  ;; (setq backup-directory-alist
  ;;           `((".*" . ,temporary-file-directory)))
  ;;     (setq auto-save-file-name-transforms
  ;;           `((".*" ,temporary-file-directory t)))

  ;; Haven't decided if I want these...
  ;; (setq delete-old-versions t
  ;;   kept-new-versions 6
  ;;   kept-old-versions 2
  ;;   version-control t)

  ;; (setq make-backup-files nil)
#+END_SRC

** Mode Line
*** Smart Mode Line						     :unused:

  Trying out [[https://github.com/Malabarba/smart-mode-line][Smart Mode Line]]

#+BEGIN_SRC emacs-lisp 
  ;; Don't ask if ok with running lisp code
  (setq sml/no-confirm-load-theme t)

  ;; Set the theme to load
  (setq sml/theme 'smart-mode-line-powerline)

  ;; Activate!
  (sml/setup)
#+END_SRC
*** Powerline
#+begin_src emacs-lisp :tangle yes
  (setq powerline-arrow-shape 'arrow)   ;; the default
#+end_src
*** Out of Box Mode Line Settings

#+BEGIN_SRC emacs-lisp
  (display-time-mode t)
  (display-battery-mode t)
#+END_SRC

** ORG MODE (too big to be listed under NEP)
*** General Org

  General settings and preferences

#+BEGIN_SRC emacs-lisp 
  ;; Set key words for visibility cycling.
    (setq org-todo-keywords
            '((sequence "TODO" "FIXME" "WAITING" "|" "DONE" "FAILED" "LOG" )))

  ;; Use org-mode when reading these filetypes
  (add-to-list 'auto-mode-alist '("\\.org$" . org-mode))
  (add-to-list 'auto-mode-alist '("\\.txt$" . org-mode))
  (add-to-list 'auto-mode-alist '("\\.bm$" . org-mode))
  (add-to-list 'auto-mode-alist '("\\.org_history$" . org-mode))

  ;; Keep the log entries out of the [E]ntry Text view
  ;; ?
  (setq org-log-into-drawer t)

  (define-key global-map "\C-cl" 'org-store-link)
#+END_SRC

*** Org Agenda							    :waiting:

#+BEGIN_SRC emacs-lisp 
  ;; ------------------------------------------------------------------------------
  ;; Start Agenda & Cycle Through Files
  ;; ------------------------------------------------------------------------------

  (define-key global-map "\C-ca" 'org-agenda) ; launch agenda command
  (global-set-key (kbd "M-n") 'org-cycle-agenda-files) ; cycle agenda files

  (setq org-agenda-skip-scheduled-if-done t)


  ;; ------------------------------------------------------------------------------
  ;; Prefixes in Agenda View (column before agenda events)
  ;; ------------------------------------------------------------------------------

  (setq org-agenda-prefix-format
    '((agenda . "  %-12:c%?-12t% s")
     (timeline . "  % s")
     (todo . "  %-12:c")
     (tags . "  %-12:c")
     (search . "  %-12:c")))

  ;; Highlight Line Mode in Emacs
  (add-hook 'org-finalize-agenda-hook 'hl-line-mode)


  ;; ------------------------------------------------------------------------------
  ;; Schedule & Deadline Prefixes
  ;; ------------------------------------------------------------------------------

  (setq org-agenda-deadline-leaders '("DLN:  " "DLN in %3d d.::" "DLN %2d d. ago::"))
  (setq org-agenda-scheduled-leaders '("Schedule: " "Sch. %2dx: "))


  ;; ------------------------------------------------------------------------------
  ;; Effort System in Column View
  ;; ------------------------------------------------------------------------------

  (setq org-columns-default-format
    "%40ITEM %TODO %3PRIORITY %10TAGS %17Effort(Estimated Effort){:} %12CLOCKSUM")
  (setq org-global-properties
        '(("Effort_ALL" . "0:10 0:20 0:30 1:00 1:30 2:00 3:00 4:00 6:00 8:00 10:00 20:00")))
                        ; (1) (2)  (3)

  ;; ------------------------------------------------------------------------------
  ;; Org Agenda Files
  ;; ------------------------------------------------------------------------------
  (setq org-agenda-files (list "/Volumes/dotsecret/calendars/"
                               "/Volumes/dotsecret/calendars/src/"                             
                               "/Volumes/dotsecret/org-dir/capture.org"))
#+END_SRC

**** Org Habits

  Make sure that habit progress graphs show up even outside the main "agenda" view.
  Found on [[https://emacs.stackexchange.com/questions/13360/org-habit-graph-on-todo-list-agenda-view][this StackOverflow link]].

#+BEGIN_SRC emacs-lisp 
  ;; (defvar my/org-habit-show-graphs-everywhere nil
  ;;   "If non-nil, show habit graphs in all types of agenda buffers.

  ;; Normally, habits display consistency graphs only in
  ;; \"agenda\"-type agenda buffers, not in other types of agenda
  ;; buffers.  Set this variable to any non-nil variable to show
  ;; consistency graphs in all Org mode agendas.")

  ;; (defun my/org-agenda-mark-habits ()
  ;;   "Mark all habits in current agenda for graph display.

  ;; This function enforces `my/org-habit-show-graphs-everywhere' by
  ;; marking all habits in the current agenda as such.  When run just
  ;; before `org-agenda-finalize' (such as by advice; unfortunately,
  ;; `org-agenda-finalize-hook' is run too late), this has the effect
  ;; of displaying consistency graphs for these habits.

  ;; When `my/org-habit-show-graphs-everywhere' is nil, this function
  ;; has no effect."
  ;;   (when (and my/org-habit-show-graphs-everywhere
  ;;          (not (get-text-property (point) 'org-series)))
  ;;     (let ((cursor (point))
  ;;           item data) 

  ;;       (while (setq cursor (next-single-property-change cursor 'org-marker))
  ;;         (setq item (get-text-property cursor 'org-marker))
  ;;         (when (and item (org-is-habit-p item)) 
  ;;           (with-current-buffer (marker-buffer item)
  ;;             (setq data (org-habit-parse-todo item))) 
  ;;           (put-text-property cursor
  ;;                              (next-single-property-change cursor 'org-marker)
  ;;                              'org-habit-p data))))))

  ;; (advice-add #'org-agenda-finalize :before #'my/org-agenda-mark-habits)
#+END_SRC

**** Schedule/Deadline Leaders

*** Org Modules
#+BEGIN_SRC emacs-lisp
  (setq org-modules '(org-bbdb
                      org-bibtex
                      org-docview
                      org-gnus
                      org-habit
                      org-info
                      org-irc
                      org-mhe
                      org-rmail
                      org-w3m))

  ;; add bullets, checklists, choose, and more org-bbdb org-bibtex
  ;; org-docview org-gnus org-info org-irc org-mhe org-rmail org-w3m
  ;; org-mac-link
#+END_SRC    
*** Clocking
#+BEGIN_SRC emacs-lisp
  (setq org-clock-persist 'history)
  (org-clock-persistence-insinuate)
#+END_SRC    
*** Capture					  :perMachine:unused:waiting:

  Set the default [[https://emacs.stackexchange.com/questions/19391/can-t-set-directory-for-org-mode-capture][target and file for notes]].

#+BEGIN_SRC emacs-lisp 
(require 'org)
(setq org-directory "/Volumes/dotsecret/org-dir")
(setq org-default-notes-file (concat org-directory "/capture.org"))
(define-key global-map "\C-cc" 'org-capture)

(setq org-capture-templates
      '(("t" "TODO Item" entry
      (file 'org-default-notes-file)
      "* TODO")
     ("n" "Org Entry" entry
      (file 'org-default-notes-file)
      "" nil nil)
     ("i" "Item" entry
      (file 'org-default-notes-file)
      "* >")))

;; ------------------------------------------------------------------------------
;; Unused
;; ------------------------------------------------------------------------------

;; (setq org-default-notes-file  "/Volumes/dotsecret/org-dir/capture.org")
;; (setq org-capture-templates-contexts nil)

#+END_SRC
*** Journal

#+BEGIN_SRC emacs-lisp 
  (setq org-journal-dir "/Volumes/dotsecret/org-journal")
#+END_SRC

*** Archive							 :perMachine:

  The location of org archive files.

#+BEGIN_SRC emacs-lisp 
  ;; archive to the datetree file, with time and name of file it came from
  (setq org-archive-location
        "/Volumes/dotsecret/org-archives/org-archive-datetrees.org::datetree/* From %s")
#+END_SRC
*** Export to LaTeX

    Research packages and add them as Ifind out what I want to use them for
    and flush out boiler plate code I don't need.

#+BEGIN_SRC emacs-lisp 
  (setq org-latex-default-packages-alist
        '(
       ;; ("spanish, russian, english" "babel" nil)
       ;; ("AUTO" "inputenc" t)
       ;; ("T1" "fontenc" t)
       ;; ("" "fixltx2e" nil)
       ("" "graphicx" t)                  ; Insert Pictures
       ;; ("" "longtable" nil)
       ;; ("" "float" nil)
       ;; ("" "wrapfig" nil)
       ;; ("" "rotating" nil)
       ;; ("normalem" "ulem" t)
       ("" "amsmath" t)                   ; Math Package
       ;; ("" "textcomp" t)
       ;; ("utf8" "inputenc" t)
       ;; ("" "marvosym" t)
       ;; ("" "wasysym" t)
       ;; ("" "amssymb" t)
       ;; ("" "hyperref" nil)
       ;; "\\tolerance=1000"
       ;; ("version=3" "mhchem" nil)

       ))
#+END_SRC
*** Org Code Templates (<el...etc)

   Org already supports some templates: [[http://orgmode.org/manual/Easy-Templates.html][Easy Templates]]
   But you can also write your own: [[https://emacs.stackexchange.com/questions/12841/quickly-insert-source-blocks-in-org-mode][Quickly Insert Source Blocks in Org Mode]]

   This is the autocomplete <el thing for org mode.

#+BEGIN_SRC emacs-lisp 
  ;; there's an error somewhere here
  (add-to-list 'org-structure-template-alist
                '("el" "#+BEGIN_SRC emacs-lisp\n ? \n#+END_SRC"))
#+END_SRC
*** Org Bullets & Lists
#+BEGIN_SRC emacs-lisp 
  ;; ------------------------------------------------------------------------------
  ;; Unused
  ;; ------------------------------------------------------------------------------


  ;; Uncomment when I know how to fit it in with my workflow. Right now I'm not sure
  ;; I want it. Look into the emacs for writers talk and how he uses bullet-points
  ;; in org .

  (require 'org-bullets)
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))

  (setq org-bullets-bullet-list '("▶" "○" "◉" "❒" "▣" "✸" "✿" ))

  ;; "☩" "☣" "▶"


#+END_SRC

*** Org Babel						     :unused:waiting:

  Add latex code blocks

#+BEGIN_SRC emacs-lisp 
  ;; active Org-babel languages
  (org-babel-do-load-languages
     'org-babel-load-languages
     '(;; other languages
       (latex . t)
       (plantuml . t)))
#+END_SRC

After source block, add ~#+results: filename.png~

Do not ask before evaluating code blocks.

#+BEGIN_SRC emacs-lisp 
  ;; (defun ck/org-confirm-babel-evaluate (lang body)
  ;;   (not (string= lang "latex")))
  ;; (setq org-confirm-babel-evaluate 'ck/org-confirm-babel-evaluate)
#+END_SRC

*** Org Grab Link
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook (lambda () 
  (define-key org-mode-map (kbd "C-c g") 'omlg-grab-link)))
#+END_SRC    

*** Word Count
    #+BEGIN_SRC emacs-lisp
      ;; Word Count
      ;; http://irreal.org/blog/?p=5722

      (defcustom wc-modeline-format "WC[%W%w/%tw]"
	"The format string for the modeline.
      The detailed information for this minor mode can be shown in many
      ways in the modeline. The formatting strings recognized in this
      format are as follows.

	%W  Original word count (before changes)
	%L  Original line count
	%C  Original character count
	%w  Change in words
	%l  Change in lines
	%c  Change in characters
	%gc Character change goal
	%gl Line change goal
	%gw Word change goal
	%tw Total words in buffer
	%tl Total lines in buffer
	%tc Total characters in buffer

      The default modeline, WC[%W%w/%tw], will display the original number
      of words followed by the change in words (delta), followed by the total
      number of words in the buffer.
      It will looks something like WC[742+360/1100] in the modeline.
      "
	)
    #+END_SRC
*** Clock

  Number of idle minutes that must pass before Org Clock asks for resolution.

#+BEGIN_SRC emacs-lisp 
  (setq org-clock-idle-time 25)           ;clock resolve time
#+END_SRC

** Newsticker							     :unused:

#+BEGIN_SRC emacs-lisp 
  ;; (setq newsticker-url-list
  ;;       '(
  ;;         ("Economist: Computer Technology"   "http://www.economist.com/topics/computer-technology/index.xml" nil 3600 nil)
  ;;         ("BBC Mundo" "http://www.bbc.com/mundo/index.xml" nil 3600 nil)
  ;;         ("Economist: China" "http://www.economist.com/sections/china/rss.xml" nil nil nil)
  ;;         ("BBC: Russian" "http://www.bbc.com/russian/index.xml" nil nil nil)
  ;;         ("Art of Manliness" "https://feeds.feedburner.com/TheArtOfManliness?format=xml" nil nil nil)
  ;;         ("Ask Reddit" "https://www.reddit.com/r/AskReddit/.rss" nil nil nil)))
#+END_SRC

** Fill Column
#+BEGIN_SRC emacs-lisp
  (setq fill-column 79)
#+END_SRC

** Defuns
    :PROPERTIES:
    :ORDERED:  t
    :END:

  - [[https://www.emacswiki.org/emacs/KillMatchingLines][Kill Matching Lines]]
  - [[https://www.emacswiki.org/emacs/TransparentEmacs#toc1][Transparent Emacs]]
  - Font-existp
  - [[https://emacs.stackexchange.com/questions/13360/org-habit-graph-on-todo-list-agenda-view][Org Habit Graphs in All Agendas]]

#+BEGIN_SRC emacs-lisp 
     ;; Set transparency of emacs
     (defun transparency (value)
       "Sets the transparency of the frame window. 0=transparent/100=opaque"
       (interactive "nTransparency Value 0 - 100 opaque:")
       (set-frame-parameter (selected-frame) 'alpha value))

    ;; ;; test if font exists before
    ;; (defun font-existsp (font)
    ;;       (if (string-equal (describe-font font)
    ;;                         "No matching font being used")
    ;;           nil
    ;;         t))

    ;; ;; Kill Matching Lines
    ;; (defun kill-matching-lines (regexp &optional rstart rend interactive)
    ;;   "Kill lines containing matches for REGEXP.

    ;; See `flush-lines' or `keep-lines' for behavior of this command.

    ;; If the buffer is read-only, Emacs will beep and refrain from deleting
    ;; the line, but put the line in the kill ring anyway.  This means that
    ;; you can use this command to copy text from a read-only buffer.
    ;; \(If the variable `kill-read-only-ok' is non-nil, then this won't
    ;; even beep.)"
    ;;   (interactive
    ;;    (keep-lines-read-args "Kill lines containing match for regexp"))
    ;;   (let ((buffer-file-name nil)) ;; HACK for `clone-buffer'
    ;;     (with-current-buffer (clone-buffer nil nil)
    ;;       (let ((inhibit-read-only t))
    ;;         (keep-lines regexp rstart rend interactive)
    ;;         (kill-region (or rstart (line-beginning-position))
    ;;                      (or rend (point-max))))
    ;;       (kill-buffer)))
    ;;   (unless (and buffer-read-only kill-read-only-ok)
    ;;     ;; Delete lines or make the "Buffer is read-only" error.
    ;;     (flush-lines regexp rstart rend interactive)))


    ;; (defvar my/org-habit-show-graphs-everywhere nil
    ;;   "If non-nil, show habit graphs in all types of agenda buffers.

    ;; Normally, habits display consistency graphs only in
    ;; \"agenda\"-type agenda buffers, not in other types of agenda
    ;; buffers.  Set this variable to any non-nil variable to show
    ;; consistency graphs in all Org mode agendas.")

    ;; (defun my/org-agenda-mark-habits ()
    ;;   "Mark all habits in current agenda for graph display.

    ;; This function enforces `my/org-habit-show-graphs-everywhere' by
    ;; marking all habits in the current agenda as such.  When run just
    ;; before `org-agenda-finalize' (such as by advice; unfortunately,
    ;; `org-agenda-finalize-hook' is run too late), this has the effect
    ;; of displaying consistency graphs for these habits.

    ;; When `my/org-habit-show-graphs-everywhere' is nil, this function
    ;; has no effect."
    ;;   (when (and my/org-habit-show-graphs-everywhere
    ;;          (not (get-text-propegrty (point) 'org-series)))
    ;;     (let ((cursor (point))
    ;;           item data) 
    ;;       (while (setq cursor (next-single-property-change cursor 'org-marker))
    ;;         (setq item (get-text-property cursor 'org-marker))
    ;;         (when (and item (org-is-habit-p item)) 
    ;;           (with-current-buffer (marker-buffer item)
    ;;             (setq data (org-habit-parse-todo item))) 
    ;;           (put-text-property cursor
    ;;                              (next-single-property-change cursor 'org-marker)
    ;;                              'org-habit-p data))))))

    ;; (advice-add #'org-agenda-finalize :before #'my/org-agenda-mark-habits)
#+END_SRC
** Diary

#+BEGIN_SRC emacs-lisp 

  (setq diary-file "/Volumes/dotsecret/diary")

  (setq diary-comment-end "-->")
  (setq diary-comment-start "<--")
  (setq diary-number-of-entries 10)

  (setq diary-displayg-function 'diary-fancy-display)

  ;; ------------------------------------------------------------------------------
  ;; Hooks
  ;; ------------------------------------------------------------------------------
  (add-hook 'today-visible-calendar-hook 'calendar-mark-today) ; Highlight today
  (add-hook 'diary-display-hook 'fancy-diary-display)          ; ?? difference from setq?

  ;; ------------------------------------------------------------------------------
  ;; Unused
  ;; ------------------------------------------------------------------------------

  ;; (setq view-diary-entries-initially t
  ;;       mark-diary-entries-in-calendar t
  ;;       number-of-diary-entries 7)

  ;; ;;(add-hook 'diary-list-entries-hook 'diary-include-other-diary-files)
  ;; ;;(add-hook 'diary-mark-entries-hook 'diary-mark-included-diary-files)



#+END_SRC
** Dired							     :unused:

   For coloring, use 'Dired use ls Dired'. Still not sure what this does.
   Also, dired-listing-switches.
#+BEGIN_SRC emacs-lisp 
  ;; Determines what the expanded dired displays

  ;; a ----- Displays all files
  ;; F ----- Flags Filenames
  ;; l ----- Displays the long format listing
  ;; G ----- Enable Colorized Output
  ;; h ----- Used w/ -l option, uses unit sufixes, byte, kB, MB, GB
  ;; t ----- Sort by time modified (most recently modified first)
  ;; u ----- Use time of last access for sorting
  ;; U ----- Use time of file creation for sorting
  ;; W ----- Display whiteouts whtn scanning directories
  ;; S ----- Sort by file size
  ;; O ----- Include the file flags in a long (-l) output
  ;; o ----- List in long format, but omit the group id
  ;; p ----- Write a slash ('/') after filename if file is a directory

  ;; (setq dired-listing-switches "-alsh")                                       
  (setq dired-listing-switches "-FlaG")

  ;; I believe this somehow invokes colors in dired
  (setq dired-use-ls-dired (quote unspecified))

  ;; Rneame/copy files across adjacent windows if you have 2 open in the sameframe
  (setq dired-dwim-target t)

  (setq dired-recursive-copies 'always)
  (setq dired-recursive-deletes 'always)

  ;; Hide Dired Details by Default
  (require 'dired-details)
  (setq dired-details-hidden-string "")
  (dired-details-install)

   ;; Dired Rainbow
   ;; (defconst my-dired-media-files-extensions
   ;;   '("mp3" "mp4" "MP3" "MP4" "avi" "mpg" "flv" "ogg"
   ;;   "wav" "png" "jpg" "jpeg" "mkv" "avi" "webm"))

   ;; ------------------------------------------------------------------------------
   ;; Unused
   ;; ------------------------------------------------------------------------------

   ;; (defun mydired-sort ()
   ;;  "Sort dired listings with directories first."
   ;;  (save-excursion
   ;;    (let (buffer-read-only)
   ;;      (forward-line 2) ;; beyond dir. header 
   ;;      (sort-regexp-fields t "^.*$" "[ ]*." (point) (point-max)))
   ;;    (set-buffer-modified-p nil)))

   ;; (defadvice dired-readin
   ;;  (after dired-after-updating-hook first () activate)
   ;;  "Sort dired listings with directories first before adding marks."
   ;;  (mydired-sort))





   ;; Specifying dired sizes


   ;; work in MB
   ;; (setq directory-free-space-args "-Pm")
   ;; (defadvice insert-directory (after insert-directory-adjust-total-by-1024 activate)
   ;;  "modify the total number by dividing it by 1024"
   ;;  (save-excursion
   ;; (save-match-data
   ;;  (goto-char (point-min))
   ;;  (when (re-search-forward "^ *total used in directory \\([0-9]+\\) ")
   ;;    (replace-match (number-to-string (/ (string-to-number (match-string 1)) 1024)) nil nil nil 1)))))



   ;; (setq dired-listing-switches "-aBhl  --group-directories-first")g

   ;; (require 'dired-sort)
#+END_SRC
*** Dired-X

#+BEGIN_SRC emacs-lisp 
  ;; (add-hook 'dired-load-hook
  ;;           (lambda ()
  ;;             (load "dired-x")
  ;;             ;; Set dired-x global variables here.  For example:
  ;;             ;; (setq dired-guess-shell-gnutar "gtar")
  ;;             ;; (setq dired-x-hands-off-my-keys nil)
  ;;             ))
  ;; (add-hook 'dired-mode-hook
  ;;           (lambda ()
  ;;             ;; Set dired-x buffer-local variables here.  For example:
  ;;             ;;(dired-omit-mode 1)
  ;;             ))
#+END_SRC

** Dired+
** Programming
*** Keybindings

  For ease of use, set shortcut for compile.

#+BEGIN_SRC emacs-lisp 
  ;; (global-set-key (kbd "C-;") 'compile) ; C-; is taken already
  ;; (global-set-key (kbd "C-j") ‘ido-select-text)
#+END_SRC
*** Python
#+BEGIN_SRC emacs-lisp
  (elpy-enable)
  ;; https://stackoverflow.com/questions/29809061/how-to-properly-setup-jedi-with-elpy-in-emacs
  (setq elpy-rpc-backend "jedi")


  ;; Bug Fix
  ;; https://emacs.stackexchange.com/questions/30082/your-python-shell-interpreter-doesn-t-seem-to-support-readline
  (with-eval-after-load 'python
    (defun python-shell-completion-native-try ()
      "Return non-nil if can trigger native completion."
      (let ((python-shell-completion-native-enable t)
            (python-shell-completion-native-output-timeout
             python-shell-completion-native-try-output-timeout))
        (python-shell-completion-native-get-completions
         (get-buffer-process (current-buffer))
         nil "_"))))
#+END_SRC
*** JavaScript
*** Java
**** JDEE

# Compile is linked to C-c C-v C-c
# C-c C-v shows major mode key-bindings

***** JDEE Server

  This requires Maven. I installed it with [[https://stackoverflow.com/questions/8826881/maven-install-on-mac-os-x][homebrew]] as seen in the second answer.
  I set up the JDEE Server using [[https://stackoverflow.com/questions/32343617/cant-set-jdee-server-in-emacs][this StackOverflow explanation]].

#+BEGIN_SRC emacs-lisp 
 ;; (setq jdee-server-dir "~/.emacs.d/jdee-server-master/jdee-server/")
#+END_SRC
*** Elisp

  Autocomplete for Elisp: [[https://stackoverflow.com/questions/7022898/emacs-autocompletion-in-emacs-lisp-mode][Emacs Autocompletion in Emacs Lisp Mode]]
  Use Flycheck, M-x checkdoc

#+BEGIN_SRC emacs-lisp 
  (setq tab-always-indent 'complete)
  (add-to-list 'completion-styles 'initials t)
#+END_SRC
*** Elm								     :unused:

#+BEGIN_SRC emacs-lisp 
  ;; (defun elm-com-1 ()
  ;;   "returns skinny comment"
  ;;   (interactive)
  ;;     (print "-- -----------------------------------------------------------------------------"))

  ;; (defun elm-com-2 ()
  ;;   "returns skinny comment"
  ;;   (interactive)
  ;;     (print "-- ============================================================================="))
#+END_SRC
** Writing in Emacs

  Hippie expand is supposed to be an improvement on the first.
  +Black Out Mode+ Darkroom is a thing. 

#+BEGIN_SRC emacs-lisp 
  ;; (global-set-key (kbd "M-/") 'hippie-expand)

  ;; Do I have to get require darkroom mode for it to laod?
  ;; Thought Cask did that...?
  (require 'darkroom)
#+END_SRC
*** Spelling & Flyspell
#+BEGIN_SRC emacs-lisp
  (setq ispell-program-name "/usr/local/Cellar/ispell/3.3.02/bin/ispell")
#+END_SRC

** Native Emacs Packages
*** PlantUml						  :unused:perMachine:

  Set the plantuml-jar-path to .emacs.d

#+BEGIN_SRC emacs-lisp 
  (setq org-plantuml-jar-path
        (expand-file-name "~/.emacs.d/plantuml.jar"))
#+END_SRC

  # Example:
      # #+begin_src plantuml :file tryout.png
      #   Alice -> Bob: synchronous call
      #   Alice ->> Bob: asynchronous call
      # #+end_src

      # #+results:
      # [[file:tryout.png]]

*** Ido
  
  - [[http://stackoverflow.com/questions/21918151/change-location-of-ido-last-history-file-in-emacs-on-windows][SO: Change Location of IDO History File (ido.last)]]
  
#+BEGIN_SRC emacs-lisp 
  (setq ido-save-directory-list-file "~/.emacs.d/machine-specific/")
#+END_SRC
*** FCI
#+BEGIN_SRC emacs-lisp 
  (setq fci-rule-color "#424242")         ; set line color
  (setq fci-rule-column 80)               ; set line location
#+END_SRC
*** Winmove							     :unused:

  Lets try it out. Use S-<left,right,up,down> to traverse windows.
  Update: It doesn't seem to play nicely with Org Mode.

#+BEGIN_SRC emacs-lisp 
  ;; (windmove-default-keybindings)
#+END_SRC

*** Tramp							     :unused:

  Trying to fix the Unix-socket domain too long error.

#+BEGIN_SRC emacs-lisp 
  ;;   (setq projectile-mode-line nil )
  ;;   ;; (setq tramp-ssh-controlmaster-options
  ;;   ;;     (concat
  ;;   ;;       "-o ControlPath=/tmp/ssh-ControlPath-%%r@%%h:%%p "
  ;;   ;;       "-o ControlMaster=auto -o ControlPersist=yes"))

  ;; ;; (setq tramp-ssh-controlmaster-options "-o ControlPath=%%C -o
  ;; ;; ControlMaster=auto -o ControlPersist=no")

  ;; (setq tramp-use-ssh-controlmaster-options nil)
#+END_SRC
*** Highlight							     :unused:
#+BEGIN_SRC emacs-lisp 
  ;; (setq hl-paren-colors (quote ("Blue" "Orange" "Green" "Red" "Yellow" "Purple")))
  ;; (setq highlight ((t (:background "Blue" :foreground "#ffffff"))))
  ;; (setq lazy-highlight ((t (:background "Green" :foreground "controlColor"))))
#+END_SRC
*** Calendar							     :unused:

 Random Calenar Commands

#+BEGIN_SRC emacs-lisp 
  (setq calendar-mark-diary-entries-flag t) ;diary/flag view
  (setq calendar-view-diary-initially-flag t)
#+END_SRC
*** Shell							     :unused:
** Outsourced Packages
*** Web Mode

#+BEGIN_SRC emacs-lisp
  ;; (require 'web-mode)
  (add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))

  (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
#+END_SRC

*** Smex

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-x") 'smex)
  (setq smex-save-file "~/.emacs.d/smex-items")
#+END_SRC

*** Tea Time

#+BEGIN_SRC emacs-lisp 

  ;; /System/Library/Sounds/
  ;; /Library/Sounds/
  ;; /Users/< username >/Library/Sounds/

;;   (require 'tea-time)
;;   (setq tea-time-sound "/System/Library/Sounds/Blow.aiff")

  ;; Required for Mac OS X
  ;; You can customize the sound command variable to any player you want
  ;; where %s will be the sound file configured at tea-time-sound setting
  (setq tea-time-sound-command "afplay %s")

;;   (global-set-key (kbd "C-c s") #'tea-time)

#+END_SRC
*** EMMS
*** AucTeX						   :ext:dependencies:
    - [X] [[http://www.tug.org/mactex/mactex-download.html][MacTeX Download Link]]
    - [X] [[http://www.electronics.oulu.fi/latex/examples/example_1/][Sample TeX Document for Testing Purposes]]

General AucTeX Preferences
#+BEGIN_SRC emacs-lisp 
  (setq-default TeX-PDF-mode t)
  (setq TeX-auto-save t)
  (setq TeX-parse-self t)
  (setq-default TeX-master nil)
  (setq TeX-electric-sub-and-superscript t)
#+END_SRC

**** Trying to Fix AucTeX
    - [X] [[https://tex.stackexchange.com/questions/285040/trouble-getting-auctex-to-load-with-emacs-update][TeX StackExchage: Trouble with AucTeX Loading]]
      
      Installed with Package Manger Cask, so I will not use (require 'tex-site).
      Add ~/usr/texbin~ to PATH file     
#+BEGIN_SRC emacs-lisp 
  (setenv "PATH" (concat (getenv "PATH") ":/usr/texbin"))
  (setq exec-path (append exec-path '("/usr/texbin")))
#+END_SRC

    - [ ] [[https://emacs.stackexchange.com/questions/31770/auctex-cannot-find-a-working-tex-distribution][Emacs StackExchange: AucTeX Cannot Find a Working TeX Distritubion]]

#+BEGIN_SRC emacs-lisp 
  ;; (when (memq window-system '(mac ns))
  ;;   (exec-path-from-shell-initialize))

  (getenv "PATH")
   (setenv "PATH"
  (concat
   "/usr/texbin" ":"
   (getenv "PATH")))

  ;; ;; Keep. Found texbin distribution. Fixed El Capitan thing.
  (setenv "PATH" "/usr/local/bin:/Library/TeX/Distributions/Programs/texbin:$PATH" t)
  (setq exec-path (append exec-path '("/Library/TeX/texbin/")))
#+END_SRC

    - [ ] [[https://www.reddit.com/r/emacs/comments/3pvwns/emacs_latex_editing_with_os_x_el_capitan/][/r/Emacs: ?]]
    - [ ] 
    - [ ] 
*** Crux

  Map some keys to useful Crux key bindings.

#+BEGIN_SRC emacs-lisp 
  ;; -----------------------------------------------------------------------------
  ;; +Somehow Install it+ No Need, Use Cask
  ;; -----------------------------------------------------------------------------

  ;; No need, use Cask:)

  ;; (unless (package-installed-p 'crux)
  ;;   (package-refresh-contents)
  ;;   (package-install 'crux))
  ;;  (require 'crux)

  ;; -----------------------------------------------------------------------------
  ;; Crux Key Bindings    
  ;; https://github.com/bbatsov/crux#keybindings
  ;; -----------------------------------------------------------------------------

  (global-set-key (kbd "C-c o") #'reveal-in-osx-finder)
  (global-set-key (kbd "C-c n") #'crux-cleanup-buffer-or-region)
  (global-set-key (kbd "C-c u") #'crux-view-url)
  (global-set-key (kbd "C-c t") #'crux-visit-term-buffer)
  ;; (global-set-key [remap move-beginning-of-line] #'crux-move-beginning-of-line)
  (global-set-key (kbd "C-c D") #'crux-delete-file-and-buffer)

  ;; -----------------------------------------------------------------------------
  ;; Open File in Web Browser
  ;; -----------------------------------------------------------------------------

  (global-set-key (kbd "C-c w") #'browse-url-of-file)
#+END_SRC

*** Magit
  
  - [[https://magit.vc/manual/magit/Status-buffer.html][Magit Key Binging Suggestion]]
  - READ: [[https://www.masteringemacs.org/article/introduction-magit-emacs-mode-git][Mastering Emacs - Introduction to Emacs Magit]]
  - READ: [[https://www.reddit.com/r/emacs/comments/2x1uzv/simple_but_really_useful_magit_feature_staging/][Simple, Really Useful Magit Feature]]

#+BEGIN_SRC emacs-lisp 
  ;; (setq magit-merge-arguments (quote ("--ff-only")))
  (global-set-key (kbd "C-x g") 'magit-status)
#+END_SRC

*** Minimap

#+BEGIN_SRC emacs-lisp 
    ;; (setq minimap-dedicated-window nil)
    ;; (setq minimap-major-modes nil)
    ;; (setq minimap-mode nil)
    ;; (setq minimap-active-region-background ((t (:background "Blue"))))


  ;; Should I be using setq here?
  ;; Set Variables
  (setq minimap-mode nil)
  (setq minimap-window-location (quote right))

  ;; Set Faces
  ;; (setq minimap-active-region-background ((t (:background "dark cyan"))))
#+END_SRC
*** BBdB							     :unused:

  BBdB Address Labels

#+BEGIN_SRC emacs-lisp 
  ;; (setq bbdb-address-label-list '("" "Office" "Home" "Dorm" "Home" "Work"))
  ;; (setq bbdb-default-label-list  '("Home" "Work" ""))
  ;; (setq bbdb-default-xfield (quote notes))
  ;; (setq bbdb-phone-label-list '("Mobile" "Home" "Office" "Other"))

  ;; importing csv file from gmail
  ;; (require 'bbdb-csv-import)

#+END_SRC

*** Ace Jump

  To make my window navegation easier.
  Shortcut from [[https://emacs.stackexchange.com/questions/3458/how-to-switch-between-windows-quickly][Emacs Stackexchange]]

#+BEGIN_SRC emacs-lisp 
    ;; (require 'ace-window)
    (global-set-key (kbd "M-p") 'ace-window)

    ;; usage keys instead of hard-to-reach numbers
    (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))

    ;; use (ace-window-display-mode) to know what the letters are beforehand
    (ace-window-display-mode)
#+END_SRC

*** Calfw							     :unused:

  Require, do I need this?

  Then call cfw:open-calendar-buffer

#+BEGIN_SRC emacs-lisp 
  ;; (require 'calfw)
  ;; (require 'calfw-org)
  ;; (setq cfw:org-agenda-schedule-args '(:scheduled :today :closed :deadline :todo :timestamp))
#+END_SRC

*** Rainbow Delimiters						     :unused:
#+BEGIN_SRC emacs-lisp 
  ;; (setq rainbow-delimiters-depth-1-face ((t (:foreground "Blue"))))
  ;; (setq rainbow-delimiters-depth-2-face ((t (:foreground "Orange"))))
  ;; (setq rainbow-delimiters-depth-3-face ((t (:foreground "Green"))))
  ;; (setq rainbow-delimiters-depth-4-face ((t (:foreground "Red"))))
  ;; (setq rainbow-delimiters-depth-5-face ((t (:foreground "Yellow"))))
  ;; (setq rainbow-delimiters-depth-6-face ((t (:foreground "Purple"))))
  ;; (setq rainbow-delimiters-depth-7-face ((t (:foreground "selectedTextBackgroundColor"))))
#+END_SRC
*** Yasnippet

  Set directory to hold snippets.

#+BEGIN_SRC emacs-lisp 

  ;; Turn on yas-minor-mode
  (yas-global-mode 1)

  ;; Set Snippet Directories
  ;; Make new snippet with 'M-x yas-new-snippet'
  ;; 'M-x yas-reload-all' to reload all 
  (setq yas-snippet-dirs
        '("~/.emacs.d/snippets/"                 ;; personal snippets
          "~/.emacs.d/.cask/25.1/elpa/yasnippet-20170326.1030/snippets/" ;; the default collection
          ;; "/path/to/some/collection/"           ;; foo-mode and bar-mode snippet collection
          ;; "/path/to/yasnippet/yasmate/snippets" ;; the yasmate collection
          ))


  ;; fix some org-mode + yasnippet conflicts
  ;; Disclosure: I've had no conflict's or issues, but just to be (very) safe...
  (defun yas/org-very-safe-expand ()
    (let ((yas/fallback-behavior 'return-nil)) (yas/expand)))
  (add-hook 'org-mode-hook
            (lambda ()
              (make-variable-buffer-local 'yas/trigger-key)
              (setq yas/trigger-key [tab])
              (add-to-list 'org-tab-first-hook 'yas/org-very-safe-expand)
              (define-key yas/keymap [tab] 'yas/next-field)))


#+END_SRC
  
*** SLIME							     :unused:
** Hooks

  First hook.

#+BEGIN_SRC emacs-lisp 
  ;; (add-hook 'prog-mode-hook #'hs-minor-mode)
#+END_SRC
** Not Yet Organized
*** Version Control

#+BEGIN_SRC emacs-lisp 
  ;; (setq vc-annotate-background "#2B2B2B")
  ;; (setq vc-annotate-color-map
  ;;    '((20 . "#BC8383")
  ;;     (40 . "#CC9393")
  ;;     (60 . "#DFAF8F")
  ;;     (80 . "#D0BF8F")
  ;;     (100 . "#E0CF9F")
  ;;     (120 . "#F0DFAF")
  ;;     (140 . "#5F7F5F")
  ;;     (160 . "#7F9F7F")
  ;;     (180 . "#8FB28F")
  ;;     (200 . "#9FC59F")
  ;;     (220 . "#AFD8AF")
  ;;     (240 . "#BFEBBF")
  ;;     (260 . "#93E0E3")
  ;;     (280 . "#6CA0A3")
  ;;     (300 . "#7CB8BB")
  ;;     (320 . "#8CD0D3")
  ;;     (340 . "#94BFF3")
  ;;     (360 . "#DC8CC3")))
  ;; (setq vc-annotate-very-old-color "#DC8CC3")
#+END_SRC
** Not Using Anymore
   Setting .emacs.d directory to another location
#+BEGIN_SRC emacs-lisp 
  ;; (setq user-emacs-directory "~/somewhere/else")
#+END_SRC

